using System.IO.Compression;
using System.Text;
using System.Collections.Generic;


Bruteforcer.Bruteforce();

class Bruteforcer
{

    //I added hashes for "a" to "aaaaaa" to get some feedback about the status.
    private static readonly ulong[] assemblyTimeStamps = new ulong[143]
    {
    2597124982561782591uL, 2600364143812063535uL, 13464308873961738403uL, 4821863173800309721uL, 12969190449276002545uL, 3320026265773918739uL, 12094027092655598256uL, 10657751674541025650uL, 11913842725949116895uL, 5449730069165757263uL,
    292198192373389586uL, 12790084614253405985uL, 5219431737322569038uL, 15535773470978271326uL, 7810436520414958497uL, 13316211011159594063uL, 13825071784440082496uL, 14480775929210717493uL, 14482658293117931546uL, 8473756179280619170uL,
    3778500091710709090uL, 8799118153397725683uL, 12027963942392743532uL, 576626207276463000uL, 7412338704062093516uL, 682250828679635420uL, 13014156621614176974uL, 18150909006539876521uL, 10336842116636872171uL, 12785322942775634499uL,
    13260224381505715848uL, 17956969551821596225uL, 8709004393777297355uL, 14256853800858727521uL, 8129411991672431889uL, 15997665423159927228uL, 10829648878147112121uL, 9149947745824492274uL, 3656637464651387014uL, 3575761800716667678uL,
    4501656691368064027uL, 10296494671777307979uL, 14630721578341374856uL, 4088976323439621041uL, 9531326785919727076uL, 6461429591783621719uL, 6508141243778577344uL, 10235971842993272939uL, 2478231962306073784uL, 9903758755917170407uL,
    14710585101020280896uL, 14710585101020280896uL, 13611814135072561278uL, 2810460305047003196uL, 2032008861530788751uL, 27407921587843457uL, 6491986958834001955uL, 2128122064571842954uL, 10484659978517092504uL, 8478833628889826985uL,
    10463926208560207521uL, 7080175711202577138uL, 8697424601205169055uL, 7775177810774851294uL, 16130138450758310172uL, 506634811745884560uL, 18294908219222222902uL, 3588624367609827560uL, 9555688264681862794uL, 5415426428750045503uL,
    3642525650883269872uL, 13135068273077306806uL, 3769837838875367802uL, 191060519014405309uL, 1682585410644922036uL, 7878537243757499832uL, 13799353263187722717uL, 1367627386496056834uL, 12574535824074203265uL, 16990567851129491937uL,
    8994091295115840290uL, 13876356431472225791uL, 14968320160131875803uL, 14868920869169964081uL, 106672141413120087uL, 79089792725215063uL, 5614586596107908838uL, 3869935012404164040uL, 3538022140597504361uL, 14111374107076822891uL,
    7982848972385914508uL, 8760312338504300643uL, 17351543633914244545uL, 7516148236133302073uL, 15114163911481793350uL, 15457732070353984570uL, 16292685861617888592uL, 10374841591685794123uL, 3045986759481489935uL, 17109238199226571972uL,
    6827032273910657891uL, 5945487981219695001uL, 8052533790968282297uL, 17574002783607647274uL, 3341747963119755850uL, 14193859431895170587uL, 17439059603042731363uL, 17683972236092287897uL, 700598796416086955uL, 3660705254426876796uL,
    12709986806548166638uL, 3890794756780010537uL, 2797129108883749491uL, 3890769468012566366uL, 14095938998438966337uL, 11109294216876344399uL, 1368907909245890092uL, 11818825521849580123uL, 8146185202538899243uL, 2934149816356927366uL,
    13029357933491444455uL, 6195833633417633900uL, 2760663353550280147uL, 16423314183614230717uL, 2532538262737333146uL, 4454255944391929578uL, 6088115528707848728uL, 13611051401579634621uL, 18147627057830191163uL, 17633734304611248415uL,
    13581776705111912829uL, 7175363135479931834uL, 3178468437029279937uL, 13599785766252827703uL, 6180361713414290679uL, 8612208440357175863uL, 8408095252303317471uL, 17640402339986273771uL, 5994523358993944528uL, 13596415802305107141uL,
    12577975108188584766uL, 4861208208842505295uL, 9407541858556330604uL
    };

    	private static readonly ulong[] configTimeStamps = new ulong[17]
	{
		17097380490166623672uL, 15194901817027173566uL, 12718416789200275332uL, 18392881921099771407uL, 3626142665768487764uL, 12343334044036541897uL, 397780960855462669uL, 6943102301517884811uL, 13544031715334011032uL, 11801746708619571308uL,
		18159703063075866524uL, 835151375515278827uL, 16570804352575357627uL, 1614465773938842903uL, 12679195163651834776uL, 2717025511528702475uL, 17984632978012874803uL
	};

    public static void Bruteforce()
    {
        char[] allowedCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_?".ToCharArray();
        int maxLength = 6; // Maximum length of the generated strings

        for (int i = 1; i <= maxLength; i++)
        {
            Helper(allowedCharacters, i, "");
        }
    }

    static void Helper(char[] allowedCharacters, int maxLength, string current)
    {
        ulong hash = Hash.GetHash(current);
        if (Array.IndexOf(assemblyTimeStamps, hash) != -1)
        {
            Console.WriteLine("assemblyTimeStamp found: " + current);
        } else if (Array.IndexOf(configTimeStamps, hash) != -1) {
            Console.WriteLine("configTimeStamp found: " + current);
        }
        if (current.Length == maxLength)
        {
            return;
        }

        foreach (char c in allowedCharacters)
        {
            string newString = current + c;
            Helper(allowedCharacters, maxLength, newString);
        }
    }
}

public class Hash() {
    
	public static ulong GetHash(string s)
	{
		ulong num = 14695981039346656037uL;
		try
		{
			byte[] bytes = Encoding.UTF8.GetBytes(s);
			foreach (byte b in bytes)
			{
				num ^= b;
				num *= 1099511628211L;
			}
		}
		catch
		{
		}
		return num ^ 0x5BAC903BA7D81967uL;
	}
}